{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dockerfiles","text":"<p>Dockerfiles for various projects</p> <ul> <li>Documentation: https://entelecheia.github.io/dockerfiles</li> <li>GitHub: https://github.com/entelecheia/dockerfiles</li> </ul> <p>This repository contains Dockerfiles for various projects. Fork this repository to create your own Dockerfiles.</p>"},{"location":"#usage","title":"Usage","text":"<p>There are a few helper scripts that can be used to simplify the process of building and running Docker containers. These scripts are installed in the process of setting up <code>dotfiles</code> and can be found in the <code>.local/bin</code> directory.</p>"},{"location":"#dockerfiles-clone-script","title":"<code>dockerfiles-clone</code> Script","text":"<p>The <code>dockerfiles-clone</code> script is designed to help you clone or update the Dockerfiles repository on your system. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>DOCKERFILES_REPO</code> or <code>DOCKERFILES_DIR</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export DOCKERFILES_REPO=\"https://github.com/username/dockerfiles.git\"\nexport DOCKERFILES_DIR=\"/path/to/dockerfiles\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dockerfiles-clone</code> script:</li> </ol> <pre><code>dockerfiles-clone\n</code></pre> <p>This script will perform the following tasks:</p> <ul> <li>Check if the Dockerfiles repository is set. If not, it will display a message and exit.</li> <li>If the Dockerfiles directory exists, it will prompt you to remove the existing directory.<ul> <li>If you choose to remove the existing directory, it will delete the directory and proceed to clone the repository.</li> <li>If you choose not to remove the existing directory, it will display a message and exit.</li> </ul> </li> <li>If the Dockerfiles directory does not exist, it will clone the Dockerfiles repository to the specified directory.</li> </ul> <p>After running the <code>dockerfiles-clone</code> script, your Dockerfiles repository will be cloned or updated, and you can start using the Dockerfiles on your system.</p>"},{"location":"#dockerfiles-pull-script","title":"<code>dockerfiles-pull</code> Script","text":"<p>The <code>dockerfiles-pull</code> script helps you update the Dockerfiles repository on your system. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>DOCKERFILES_REPO</code> or <code>DOCKERFILES_DIR</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export DOCKERFILES_REPO=\"https://github.com/username/dockerfiles.git\"\nexport DOCKERFILES_DIR=\"/path/to/dockerfiles\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dockerfiles-pull</code> script:</li> </ol> <pre><code>dockerfiles-pull\n</code></pre> <p>This script will perform the following tasks:</p> <ul> <li>Check if the Dockerfiles directory exists.</li> <li>If the directory exists and is a valid Git repository, it will update the Dockerfiles repository using <code>git pull --rebase --autostash</code>.</li> </ul> <p>After running the <code>dockerfiles-pull</code> script, your Dockerfiles repository will be updated, and you can continue using the latest Dockerfiles on your system.</p>"},{"location":"#dockerfiles-sync-script","title":"<code>dockerfiles-sync</code> Script","text":"<p>The <code>dockerfiles-sync</code> script helps you synchronize Dockerfiles between your project directory and the shared Dockerfiles directory. To use this script, follow these steps:</p> <ol> <li>Configure Environment Variables (optional):    If you have specific values for <code>WORKSPACE_PROJECT_DIR</code> or <code>DOCKERFILES_SHARE_DIR</code>, you can set these environment variables before running the script. Otherwise, the script will use the default values specified in the script.</li> </ol> <pre><code>export WORKSPACE_PROJECT_DIR=\"/path/to/workspace/project/directory\"\nexport DOCKERFILES_SHARE_DIR=\"/path/to/dockerfiles/share/directory\"\n</code></pre> <ol> <li>Run the Script:    Execute the <code>dockerfiles-sync</code> script with the desired options:</li> </ol> <pre><code>dockerfiles-sync [DOCKER_NAME] [--from-project] [--project-directory PROJECT_DIR] [--dockerfiles-directory DOCKERFILES_DIR] [-h|--help]\n</code></pre> <p>Available options:</p> <ul> <li><code>DOCKER_NAME</code>: Specify the name of a specific Docker project to sync.</li> <li><code>--from-project</code>: Sync Dockerfiles from the project directory to the shared Dockerfiles directory.</li> <li><code>--project-directory PROJECT_DIR</code>: Set the project directory path.</li> <li><code>--dockerfiles-directory DOCKERFILES_DIR</code>: Set the shared Dockerfiles directory path.</li> <li><code>-h|--help</code>: Display usage information.</li> </ul> <p>Examples:</p> <ul> <li> <p>Sync all Dockerfiles from the shared Dockerfiles directory to the workspace project directory:</p> <pre><code>dockerfiles-sync\n</code></pre> </li> <li> <p>Sync a specific Dockerfile from the shared Dockerfiles directory to the workspace project directory:</p> <pre><code>dockerfiles-sync my-docker-project\n</code></pre> </li> <li> <p>Sync all Dockerfiles from the workspace project directory to the shared Dockerfiles directory:</p> <pre><code>dockerfiles-sync --from-project\n</code></pre> </li> <li> <p>Sync a specific Dockerfile from the workspace project directory to the shared Dockerfiles directory:</p> <pre><code>dockerfiles-sync my-docker-project --from-project\n</code></pre> </li> </ul> <p>After running the <code>dockerfiles-sync</code> script, your Dockerfiles will be synchronized between the specified directories. The <code>dk-compose</code> script is a convenient wrapper for managing Docker Compose projects. To use the script, follow the usage format below:</p>"},{"location":"#dk-compose-script","title":"<code>dk-compose</code> Script","text":"<pre><code>Usage: dk-compose COMMAND DOCKER_NAME [-t|--tag TAG] [--from-project] [--project-directory PROJECT_DIR] [--dockerfiles-directory DOCKERFILES_DIR] [-c|--compose-filename COMPOSE_FILENAME] [-e|--env-filename ENV_FILENAME] [-v|--version VERSION] [-l|--latest] [--push] [-n|--name CONTAINER_NAME] [--network DOCKER_NETWORK_NAME] [-u|--username USERNAME] [-h|--help]\n</code></pre> <p>COMMAND - One of the following Docker Compose commands:</p> <ul> <li><code>build</code>: Build the Docker services defined in the Compose file.</li> <li><code>run</code>: Run a one-off command on a service.</li> <li><code>up</code>: Create and start the containers defined in the Compose file.</li> <li><code>down</code>: Stop and remove containers, networks, and volumes defined in the Compose file.</li> </ul> <p>DOCKER_NAME - The name of the Docker project.</p> <p>Options:</p> <ul> <li> <p><code>-t, --tag TAG</code>: Specify a tag to use for the Docker Compose file and environment file. The script will look for files named <code>docker-compose-TAG.yaml</code> and <code>docker.TAG.env</code>, where <code>TAG</code> is the provided tag.</p> </li> <li> <p><code>--from-project</code>: Use the project directory as the source of the Docker Compose files instead of the default Dockerfiles directory.</p> </li> <li> <p><code>--project-directory PROJECT_DIR</code>: Provide a custom path to the project directory. If not specified, the script will use the default project directory.</p> </li> <li> <p><code>--dockerfiles-directory DOCKERFILES_DIR</code>: Provide a custom path to the directory containing the Dockerfiles. If not specified, the script will use the default Dockerfiles directory.</p> </li> <li> <p><code>-c, --compose-filename COMPOSE_FILENAME</code>: Specify a custom Docker Compose file name. If not specified, the script will use the default <code>docker-compose.yaml</code> or <code>docker-compose-TAG.yaml</code> based on the provided tag.</p> </li> <li> <p><code>-e, --env-filename ENV_FILENAME</code>: Specify a custom environment file name. If not specified, the script will use the default <code>docker.env</code> or <code>docker.TAG.env</code> based on the provided tag.</p> </li> <li> <p><code>-v, --version VERSION</code>: Specify the version of the Docker image to use. This will be set as the <code>VERSION</code> environment variable for the Docker Compose process.</p> </li> <li> <p><code>-l, --latest</code>: Use the latest version of the Docker image. Sets the <code>VERSION</code> environment variable to \"latest\".</p> </li> <li> <p><code>--push</code>: After successfully building the Docker image, push the image to a remote repository.</p> </li> <li> <p><code>-n, --name CONTAINER_NAME</code>: Specify a custom name for the container that will be created.</p> </li> <li> <p><code>--network DOCKER_NETWORK_NAME</code>: Specify the name of the Docker network to use or create. If the network does not exist, the script will create it.</p> </li> <li> <p><code>-u, --username USERNAME</code>: Specify the username to use for the Docker image. If not provided, the script will use the default username from the configuration.</p> </li> <li> <p><code>-h, --help</code>: Display the usage information for the script.</p> </li> </ul> <p>Examples:</p> <ol> <li>Build a Docker project named <code>my_project</code> with tag <code>dev</code>:</li> </ol> <pre><code>dk-compose build my_project -t dev\n</code></pre> <ol> <li>Run a one-off command (<code>some_command</code>) on the <code>my_service</code> service in the <code>my_project</code> Docker project:</li> </ol> <pre><code>dk-compose run my_project --name my_service some_command\n</code></pre> <ol> <li>Start the containers defined in the <code>my_project</code> Docker project with tag <code>prod</code>:</li> </ol> <pre><code>dk-compose up my_project -t prod\n</code></pre> <ol> <li>Stop and remove the containers, networks, and volumes defined in the <code>my_project</code> Docker project with tag <code>prod</code>:</li> </ol> <pre><code>dk-compose down my_project -t prod\n</code></pre> <p>Remember that the <code>dk-compose</code> script should be executable and located in a directory included in the <code>PATH</code> variable (e.g., <code>.local/bin</code>).</p>"},{"location":"#changelog","title":"Changelog","text":"<p>See the CHANGELOG for more information.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please see the contributing guidelines for more information.</p>"},{"location":"#license","title":"License","text":"<p>This project is released under the MIT License.</p> <p>Check out the usage section for further information.</p> <p>Note</p> <p>This project is under active development.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"usage/","title":"Usage","text":""}]}